Todos
    - set base parameter for xbgboost
    - 
    - do feature selection 
        1. Permutation importance
    - If feature selection has huge impact on its performance, do more selection method
    - Otherwise, think about other new feature and check outliers.

		
	
Done
  - write scalable code for change of validation strategy
	- train with validation data and predict test
	- create scaled dataset additionally
	- create binning feature
		- ex) item_total_price: 
	- search how to deal with outlier rather than removing it
	
  - create function to get index for validation 
			- we are separating data based on date_block_num, but to make the system flexible we need to get index for the data_block_num used for validation
	- find out validation strategy
			1. simple hold-out based on time series
				- tr: 12-32, va: 33, te: 34
				- tr: 12-21, va:22, te:34
				- 
			2. seasonal cross-validation
				- tr: [12-15, 12-18, 12-21, 12-24, 12-27, 12-30, 12-32]
				, va: [16, 19, 22, 25, 28, 31, 33]
				, te: [34]
	- deal with outlier in item_price and item_cnt_day	
		- use item_price <= 100000
		- use item_cnt_day <= 1000
	- replace negative values in item_price in sales_train with median
		- there is only one -1 in item_price 
		- simply replacing with median can work
	- generatetrain data for each month
		- generate day, date, month feature
		- aggregate item_price and item_cnt_day by item_id, shopi_id, and month
	- create training dataset similar to test dataset
		- create all pair of shops and items occurred in the month
	- create lag features
		- simple target lag feature
			- lag of item_cnt_month
			- 1, 2, 3, 6, 12 months 
				- (we are taking lag of far past, because the same item and shop does not occur frequently )
		- Mean encoded features for each month
		    - Simple mean encoding for item_cnt_month
				- Lag feature of average of value for each month (date_block_num)
					- lag: 1 month
				- Lag feature of average of value for each items in the month (date_block_num * item_id)
					- lag: 1, 2, 3, 6. 12 month
				- Lag feature of average of value for each shops in the month (date_block_num * shop_id) 
					- lag: 1, 2, 3, 6, 12 month
				- Lag feature of average of value for each item_categories in the month  (date_block_num * item_category_id)
					- lag: 1, 2, 3, 6, 12 month
				- Lag feature of average of value for each item type in the month  (date_block_num * type_code)
					- lag: 1 month
				- Lag feature of average of value for each item subtype in the month  (date_block_num * subtype_code)
					- lag: 1 month
				- Lag feature of average of value for each city in the month  (date_block_num * city_code)
					- lag: 1 month
			- Combination mean encoding for item_cnt_month
				- Lag feature of average of value for each combination of shop and item_category in the month (date_block_num * shop_id * item_category_id) 
					- lag: 1 month
				- Lag feature of average of value for each combination of shop and item type in the month (date_block_num * shop_id * type_code)
					- lag: 1 month 
				- Lag feature of average of value for each combination of shop and item subtype in the month (date_block_num * shop_id * subtype_code)
					- lag: 1 month 
				- Lag feature of average of value for each combination of item and  city in the month (date_block_num * item_id * city_code)
					- lag: 1 month 	
	- create trend feature for item price
		- item_price_total_avg: calculate item price average on overall train data
		- item_price_month_avg: calculate item price average for each month
		- item_price_month_avg_lag_i: generate lag feature of item_price_month_avg
			- lag: [1, 2, 3, 4, 5, 6]
		- delta_item_price_lag_i :calculate 
			- (item_month_avg_lag  - item_price_total_avg) / item_price_total_avg
		- select delta_item_price_lag_i which is not 0 and whose i is smallest for each row.
	- create trend feature for shop revenue
		- calculate 'revenue' (item_price * item_cnt_day) on sales_train file 
		- shop_month_revenue: calculate monthly revenue for each shop in the month
		- shop_avg_revenue: calculate average of monthly revenue
		- delta_shop_revenue: calculate
			- (shop_month_revenue - shop_avg_revenue) / shop_avg_revenue
		- delta_shop_renenue_lag
			- lag: 1	

	- create month number
    - write best process for validation traning and prediction. 
		- for neural network we need scaler used in training to be saved for prediction.
		- but scaler is not savable with builtin model_save method.
        - Inserted Batch_Normalization right after input layer


    - change validation method to train data with smaller dataset flexibly