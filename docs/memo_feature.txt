Original Feature


    - sales_train.csv (Daily historical data from January 2013 to October 2015)
        - data_block_num
        - shop_id
			* some shops occur many times and some other shops occur few times
			* 60 unique shops
		- item_id
			* 21807 unique items
		- item_price 
			* There can be outlier
			* -1 could be representation of null
			* item_price could be set in relatively same item_price
		- item_count_day
			* number of products sold at the day
			* There can be outlier
			* It could be heavily dependent on item
			* check if it is returned or not


	- test.csv (forecast the sales for shops and products for November 2015)
		- ID
			* 214200 unique pair
		- shop_id
			* 42 unique shops
			* 0 new shops
		- item_id
			* 5100 unique items
			* 363 new items
   
	- items.csv
		- item_id
		- item_category_id
			* 22170 unique items

	- shops.csv
		- shop_name
			* starts with the city name
		- shop_id
			* 60 unique shops

	- item_categories.csv
		- item_category_name
			* contains "type" and "subtype"
		- item_category_id
			* 84 unique item_categories

Comment
	- Predict number of total sales corresponding to items in each shop soled in Nov 2015
    - lag feature can be created 
		- 
Todos
	- create month number
	- create 
	- create feature related to month and use month as key to merge it
	- find out validation strategy
	- create scaled dataset additionally
	- create binning feature
		- ex) item_total_price: 
	- search how to deal with outlier rather than removing it
	

Done
	- deal with outlier in item_price and item_cnt_day	
		- use item_price <= 100000
		- use item_cnt_day <= 1000
	- replace negative values in item_price in sales_train with median
		- there is only one -1 in item_price 
		- simply replacing with median can work
	- generatetrain data for each month
		- generate day, date, month feature
		- aggregate item_price and item_cnt_day by item_id, shopi_id, and month
	- create training dataset similar to test dataset
		- create all pair of shops and items occurred in the month
	- create lag features
		- simple target lag feature
			- lag of item_cnt_month
			- 1, 2, 3, 6, 12 months 
				- (we are taking lag of far past, because the same item and shop does not occur frequently )
		- Mean encoded features for each month
		    - Simple mean encoding for item_cnt_month
				- Lag feature of average of value for each month (date_block_num)
					- lag: 1 month
				- Lag feature of average of value for each items in the month (date_block_num * item_id)
					- lag: 1, 2, 3, 6. 12 month
				- Lag feature of average of value for each shops in the month (date_block_num * shop_id) 
					- lag: 1, 2, 3, 6, 12 month
				- Lag feature of average of value for each item_categories in the month  (date_block_num * item_category_id)
					- lag: 1, 2, 3, 6, 12 month
				- Lag feature of average of value for each item type in the month  (date_block_num * type_code)
					- lag: 1 month
				- Lag feature of average of value for each item subtype in the month  (date_block_num * subtype_code)
					- lag: 1 month
				- Lag feature of average of value for each city in the month  (date_block_num * city_code)
					- lag: 1 month
			- Combination mean encoding for item_cnt_month
				- Lag feature of average of value for each combination of shop and item_category in the month (date_block_num * shop_id * item_category_id) 
					- lag: 1 month
				- Lag feature of average of value for each combination of shop and item type in the month (date_block_num * shop_id * type_code)
					- lag: 1 month 
				- Lag feature of average of value for each combination of shop and item subtype in the month (date_block_num * shop_id * subtype_code)
					- lag: 1 month 
				- Lag feature of average of value for each combination of item and  city in the month (date_block_num * item_id * city_code)
					- lag: 1 month 	
	- create trend feature for item price
		- item_price_total_avg: calculate item price average on overall train data
		- item_price_month_avg: calculate item price average for each month
		- item_price_month_avg_lag_i: generate lag feature of item_price_month_avg
			- lag: [1, 2, 3, 4, 5, 6]
		- delta_item_price_lag_i :calculate 
			- (item_month_avg_lag  - item_price_total_avg) / item_price_total_avg
		- select delta_item_price_lag_i which is not 0 and whose i is smallest for each row.
	- create trend feature for shop revenue
		- calculate 'revenue' (item_price * item_cnt_day) on sales_train file 
		- shop_month_revenue: calculate monthly revenue for each shop in the month
		- shop_avg_revenue: calculate average of monthly revenue
		- delta_shop_revenue: calculate
			- (shop_month_revenue - shop_avg_revenue) / shop_avg_revenue
		- delta_shop_renenue_lag
			- lag: 1	